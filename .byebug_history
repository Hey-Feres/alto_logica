expect(described.print_receipt).to output('Sales Taxes: 1.50').to_stdout
result
result = described.print_receipt
described.print_receipt
continue
unity_tax.floor(2)
unity_tax.floor(3)
unity_tax.ceil(3)
unity_tax.ceil(2)
unity_tax.ceil
unity_tax
round_value(val)
round_to(val)
val = unity_tax
unity_tax
round_value unity_tax
def round_value(val)
    (val * 10**2).round.to_f / 10**2
  end
(unity_tax*20).round(1) / 20.0
(unity_tax*20).round(2) / 20.0
(unity_tax*20).round / 20.0
unity_tax = item_unity_price * 0.1
(item_unity_price * 0.1).round / 2.0
(item_unity_price * 0.1).round(2)
item_unity_price.round(2)
lx = 1.499
let x = 1.499
item_unity_price * 0.1
item_unity_price.round(2)
item_unity_price
(item_unity_price * 0.1).round(2)
(item_unity_price * 0.1).round(3)
item_unity_price * 0.1
item_unity_price
1.49.round(2)
1.49.round(3)
1.49.round
sprintf("%.2f",(item_unity_price * 0.1))
unity_tax = (item_unity_price * 0.1).round(2)
item_quantity
unity_tax * item_quantity
item_unity_price * 0.1
item_unity_price
continue
total_taxes += (unity_tax * item_quantity).round(2)
unity_tax * item_quantity
unity_tax = (item_unity_price * 0.05).round(2)
item_unity_price * 0.05
item_unity_price
continue
taxes
item_unity_price * item_quantity
item_unity_price
taxes
item_unity_price * item_quantity
item_unity_price
((item_unity_price * item_quantity) + taxes).round(2)
continue
((item_unity_price * item_quantity) + taxes).round(2)
continue
((item_unity_price * item_quantity) + taxes).round(2)
continue
((item_unity_price * item_quantity) + taxes).round(2)
((item_unity_price * item_quantity) + taxes)
item_unity_price * item_quantity
item_quantity
item_unity_price
continue
transaction.split(' ')[-1].to_f.round(2)
continue
transaction.split(' ')[-1].to_f.round(2)
continue
transaction.split(' ')[-1].to_f.round(2)
continue
transaction.split(' ')[-1].to_f.round(2)
transaction.split(' ')[-1]
transaction
continue
47.50* 0.15
item_unity_price * item_quantity
total_taxes.round(2)
total_taxes += (item_unity_price * item_quantity) * 0.15
total_taxes
(item_unity_price * item_quantity) * 0.15
(item_unity_price * item_quantity)
item_quantity
item_unity_price
!exempt_product?(item_name) && item_imported
exempt_product?(item_name) && item_imported
total_taxes = 0.0
exempt_product?(item_name) && !item_imported
item_imported
item_name
continue
item_name
continue
@items.map(&:taxes)
@items
continue
item
continue
exempt_product?(item.item_name)
item
continue
total_taxes = 0.0
(item.item_unity_price * item.item_quantity) * 0.05
item.item_unity_price * item.item_quantity
item.item_unity_price
true and !item.imported
item.imported
item_name.include?('book') || item_name.include?('chocolate') || item_name.include?('headache')
item_name = "imported box of chocolates"
item_name.include?('book') || item_name.include?('chocolate') || item_name.include?('headache')
item_name = item.item_name
item_name = item.name
item.item_name
total_taxes = 0.0
(item.item_unity_price * item.item_quantity) * 0.1
item.item_quantity
item.item_unity_price
item.item_unity_price * item.item_quantity
item = @items[0]
items
item
continue
item.include?("imported")
item.include("imported")
item[/[imported](.)\1/]
item[/[aeiou](.)\1/]
item#[/[aeiou](.)\1/]
item = items.last
item
items
continue
item.item_name
item = @items[0]
item = @items.last
continue
@items
@items.delete_at(-1)
@items - @items[-1]
@items
@items[-1].delete
@items[-1]#.delete
@items
item.gsub(/\d*\.?\d*/, "").gsub(/at/, '').strip
item.gsub(/\d*\.?\d*/, "").gsub(/at/, '').slice('')
item.gsub(/\d*\.?\d*/, "").gsub(/at/, '').slice()
item.gsub(/\d*\.?\d*/, "").gsub(/at/, '').slice
item.gsub(/\d*\.?\d*/, "").gsub(/at/, '')
item.gsub(/\d*\.?\d*/, "").gsub(/abcd/, '')
item.gsub(/\d*\.?\d*/, "")
item.gsub("/\d*\.?\d*/", "")
item.gsbu("/\d*\.?\d*/", "")
item
item./\d*\.?\d*/
item
item = @items[-2]
@items
continue
"#{item_qnt} #{product}: #{item_qnt * unity_price}"
unity_price = item.split(' ')[-1].to_f
unity_price = item.split(' ')[-1]
product = item.split(' ')[1]
item_qnt = item.split(' ')[0].to_i
item
product = item[1]
item.split(" ")[1]
item.split(" ")[0]
item.split(" ").count
item.split(" ")
product = item[1]
item_qnt = item[0].to_i
item.split(" ")
item = @items[0]#.split(" ")
item.split(" ")
@items.first
@items
